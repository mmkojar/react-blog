-----------------login function-----------------

import React, { Component } from 'react';
import { withRouter, Redirect } from 'react-router-dom';
import NavbarMenu from '../Layouts/NavbarMenu';
import axios from 'axios';


class login extends Component {

    constructor(props) {
        super();
        this.state = {
            email: ' ',
            password: ' ',
            isAuthenticated: ' ',
            store: ' ',
            Error: ' ',
            nameErr: ' ',
            emailErr: ' ',
            class: 'none'
        }
    }

    validation() {

        let emailpattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
        if (this.state.email === ' ' && this.state.password === ' ') {
            this.setState({
                emailErr: 'Please Enter your Email',
                passErr: 'Please Enter your Password',
            })
        }
        else if (!emailpattern.test(this.state.email)) {
            this.setState({ emailErr: 'Enter Valid Email' })
            this.setState({
                passErr: '',
            })
        }
        else {
            return true
        }
    }

    login(e) {
        e.preventDefault();
        this.setState({
            emailErr: '',
            passErr: '',
        })

        if (this.validation()) {
            axios.request({
                method: "POST",
                url: 'http://127.0.0.1:8000/api/login/login',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                data: this.state
            }).then(response => {
                console.log(response);
                localStorage.setItem('login', JSON.stringify({
                    isAuthenticated: true,
                    token: response.data.data.token,
                    userid: response.data.data.id,
                    username: response.data.data.name
                }))
                this.setState({ class: 'block', isAuthenticated: true, Error: 'Login Success !' });
                this.props.history.push('/dashboard');
            }).catch(err => {
                console.log(err)
                this.setState({
                    class: 'block',
                    Error: 'Invalid Email and Password'
                })
            })
        }
    }

    render() {
        if (localStorage.getItem('login')) {
            return <Redirect to="/dashboard" />
        }
        return (
            <div className="container">
                <NavbarMenu></NavbarMenu>
                <div className="row justify-content-center">
                    <div className="col-md-8">
                        <div className="card">
                            <div className="card-header">Login</div>
                            <div className="alert alert-danger" style={{ display: this.state.class }}>{this.state.Error}</div>
                            <div className="card-body">
                                <form onSubmit={this.login.bind(this)}>
                                    <div className="form-group row">
                                        <label htmlFor="email" className="col-md-4 col-form-label text-md-right">E-Mail Address</label>
                                        <div className="col-md-6">
                                            <input type="email" className="form-control " name="email" onChange={(e) => { this.setState({ email: e.target.value }) }} />
                                            <p className="alert-danger">{this.state.emailErr}</p>
                                        </div>
                                    </div>

                                    <div className="form-group row">
                                        <label htmlFor="password" className="col-md-4 col-form-label text-md-right">Password</label>
                                        <div className="col-md-6">
                                            <input type="password" className="form-control " name="password" onChange={(e) => { this.setState({ password: e.target.value }) }} />
                                            <p className="alert-danger">{this.state.passErr}</p>
                                        </div>
                                    </div>

                                    <div className="form-group row mb-0">
                                        <div className="col-md-8 offset-md-4">
                                            <button type="submit" className="btn btn-primary">
                                                Login
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default withRouter(login);


--------------register function-------------------

import React, { PureComponent } from 'react';
import { Redirect } from 'react-router-dom';
import NavbarMenu from '../Layouts/NavbarMenu';
import { connect } from 'react-redux';
import PropTypes from 'prop-types'
import { registerAction } from '../../actions/authActions';
import { Alert } from 'react-bootstrap';


class register extends PureComponent {

    state = {
        name: '',
        email: '',
        phone: '',
        password: '',
        cpassword: '',
        msg: null
        // nameErr: ' ',
        // emailErr: ' ',
        // phoneErr: ' ',
        // passErr: ' ',
        // cpassErr: ' '
    };

    static propTypes = {
        isAuthenticated: PropTypes.bool,
        successMsg: PropTypes.object,
        registerAction: PropTypes.func.isRequired
    }

    handleChange(e) {
        this.setState({ [e.target.name]: e.target.value });
    }

    // componentDidUpdate(prevProps) {
    //     const { user } = this.props;
    //     console.log(user);
    //     // if (errors !== prevProps.errors) {
    //     //     if (errors.status === 'error') {
    //     //         this.setState({ msg: errors.message })
    //     //     }
    //     //     else {
    //     //         this.setState({ msg: null })
    //     //     }
    //     // }

    // }

    /*validation() {

        let emailpattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
        let Phonepattern = new RegExp(/^[0-9\b]+$/);
        if (this.state.name === ' ' && this.state.email === ' ' && this.state.phone === ' ' && this.state.password === ' ' && this.state.cpassword === ' ') {
            this.setState({
                nameErr: 'Please Enter your Name',
                emailErr: 'Please Enter your Email',
                phoneErr: 'Please Enter your Contact No.',
                passErr: 'Please Enter your Password',
                cpassErr: 'Please confirm Password'
            })
        }
        else if (this.state.name.length < 3) {
            this.setState({ nameErr: 'Length should be greater than 3' })
            this.setState({
                emailErr: '',
                phoneErr: '',
                passErr: '',
                cpassErr: ''
            })
        }
        else if (!emailpattern.test(this.state.email)) {
            this.setState({ emailErr: 'Enter Valid Email' })
            this.setState({
                nameErr: '',
                phoneErr: '',
                passErr: '',
                cpassErr: ''
            })
        }
        else if (!Phonepattern.test(this.state.phone)) {
            this.setState({ phoneErr: 'Invalid Number' })
            this.setState({
                nameErr: '',
                emailErr: '',
                passErr: '',
                cpassErr: ''
            })
        }
        else if (this.state.password.length < 6) {
            this.setState({ passErr: 'Length should be greater than 6' })
            this.setState({
                nameErr: '',
                emailErr: '',
                phoneErr: '',
                cpassErr: ''
            })
        }
        else if (this.state.password !== this.state.cpassword) {
            this.setState({ cpassErr: 'Both Password should be matched' })
            this.setState({
                nameErr: '',
                emailErr: '',
                phoneErr: '',
                passErr: '',
            })
        }
        else {
            return true
        }
    }*/

    handleSubmit(e) {
        e.preventDefault();
        // this.setState({
        //     nameErr: '',
        //     emailErr: '',
        //     phoneErr: '',
        //     passErr: '',
        //     cpassErr: ''
        // })
        // if (this.validation()) {        
        const { name, email, phone, password } = this.state
        const newUser = {
            name, email, phone, password
        }


        this.props.registerAction(newUser);
        // }

    }

    render() {
        if (localStorage.getItem('login')) {
            return <Redirect to="/dashboard" />
        }
        return (
            <div className="container">
                <NavbarMenu></NavbarMenu>
                <div className="row justify-content-center">
                    <div className="col-md-8">
                        <div className="card">
                            <div className="card-header">Register</div>
                            <div className="card-body">
                                <form onSubmit={this.handleSubmit.bind(this)}>
                                    {
                                        this.state.msg ?
                                            <Alert variant={"danger"}>
                                                {this.state.msg}
                                            </Alert> : null
                                    }
                                    <div className="form-group row">
                                        <label htmlFor="name" className="col-md-4 col-form-label text-md-right">Name</label>
                                        <div className="col-md-6">
                                            <input type="text" className="form-control " name="name" onChange={this.handleChange.bind(this)} />
                                            {/* <p className="alert-danger">{this.state.nameErr}</p> */}
                                        </div>

                                    </div>

                                    <div className="form-group row">
                                        <label htmlFor="email" className="col-md-4 col-form-label text-md-right">E-Mail Address</label>
                                        <div className="col-md-6">
                                            <input type="email" className="form-control " name="email" onChange={this.handleChange.bind(this)} />
                                            {/* <p className="alert-danger">{this.state.emailErr}</p> */}
                                        </div>
                                    </div>

                                    <div className="form-group row">
                                        <label htmlFor="phone" className="col-md-4 col-form-label text-md-right">Contact No</label>

                                        <div className="col-md-6">
                                            <input type="phone" className="form-control " name="phone" onChange={this.handleChange.bind(this)} />
                                            {/* <p className="alert-danger">{this.state.phoneErr}</p> */}
                                        </div>
                                    </div>

                                    <div className="form-group row">
                                        <label htmlFor="password" className="col-md-4 col-form-label text-md-right">Password</label>

                                        <div className="col-md-6">
                                            <input type="password" className="form-control " name="password" onChange={this.handleChange.bind(this)} />
                                            {/* <p className="alert-danger">{this.state.passErr}</p> */}
                                        </div>
                                    </div>

                                    <div className="form-group row">
                                        <label htmlFor="password-confirm" className="col-md-4 col-form-label text-md-right">Confirm Password</label>

                                        <div className="col-md-6">
                                            <input type="password" className="form-control" name="cpassword" onChange={this.handleChange.bind(this)} />
                                            {/* <p className="alert-danger">{this.state.cpassErr}</p> */}
                                        </div>
                                    </div>

                                    <div className="form-group row mb-0">
                                        <div className="col-md-6 offset-md-4">
                                            <button type="submit" className="btn btn-primary">
                                                Register
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}
const mapStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated,
    user: state.auth.user
})

export default connect(
    mapStateToProps,
    { registerAction }
)(register)
// export default withRouter(register);


-----------add-post---------------

 this.state = {
            // titleErr: '',
            // bodyErr: '',
            // categoryErr: '',
            token: localStorage.getItem('token')
        }

/*validation() {
        if (this.titleRef.current.value === '' && this.bodyRef.current.value === '' && this.categoryRef.current.value === '') {
            this.setState({
                titleErr: 'Please Enter title',
                bodyErr: 'Please Enter body',
                categoryErr: 'Select Category'
            })
        }
        else if (this.titleRef.current.value === '') {
            this.setState({
                titleErr: 'Please Enter title',
                bodyErr: '',
                categoryErr: ''
            })
        }
        else if (this.bodyRef.current.value === '') {
            this.setState({
                titleErr: '',
                bodyErr: 'Please Enter body',
                categoryErr: ''
            })
        }
        else if (this.categoryRef.current.value === '') {
            this.setState({
                titleErr: '',
                bodyErr: '',
                categoryErr: 'Select Category'
            })
        }
        else {
            return true;
        }
    }*/

    <div className="container">
                <h1>Create Post</h1>
                <form onSubmit={this.handleSubmit.bind(this)} >
                    <div className="form-group">
                        <label htmlFor="title">Title</label>
                        <input type="text" className="form-control" name="title" ref={this.titleRef} />
                        {/* {
                            this.state.titleErr ?
                                <p className="mt-2 alert-danger">{this.state.titleErr}</p>
                                : null

                        } */}
                    </div>
                    <div className="form-group">
                        <label htmlFor="body">Body</label>
                        <textarea className="form-control" rows="5" name="body" cols="50" ref={this.bodyRef}></textarea>
                        {/* {
                            this.state.bodyErr ?
                                <p className="mt-2 alert-danger">{this.state.bodyErr}</p>
                                : null

                        } */}
                    </div>
                    <div className="form-group">
                        <label htmlFor="cover_image">Upload Image</label><br />
                        <input name="cover_image" type="file" ref={this.cover_imageRef} />
                    </div>
                    <div className="form-group">
                        <label htmlFor="category">Category</label>
                        <select className="form-control" name="category" ref={this.categoryRef}>
                            <option value="" defaultValue>Select...</option>
                            {

                                this.props.posts.categories ?
                                    this.props.posts.categories.map((cat) =>
                                        <Fragment key={cat.id}>
                                            <option value={cat.id}>{cat.category_name}</option>
                                        </Fragment>
                                    )
                                    : null
                            }

                        </select>
                        {/* {
                            this.state.categoryErr ?
                                <p className="mt-2 alert-danger">{this.state.categoryErr}</p>
                                : null

                        } */}
                    </div>

                    <input className="btn btn-primary" type="submit" value="Submit" />
                </form>
            </div>